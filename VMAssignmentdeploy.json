{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
       "type": "string",
       "metadata": { "description": "Username for the Virtual Machine." }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": { "description": "Password for the Virtual Machine." }
    },
    "windowsOSVersion": {
        "type": "string",
        "defaultValue": "2016-Datacenter",
        "metadata": { "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version."}
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_D2_v3",
      "metadata": { "description": "Define size of the virtual machine." }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": { "description": "Location for all resources." }
    },
    "environment": {
       "type": "string",
       "defaultValue": "Test",
       "metadata": {"descripton": "Define Environment where the VM will be assigned." }

    }
  },
  "variables": {
    "project": "AssignmentWork",
    "resourceNames": {
        "storageAccountName": {
          "name": "[ToLower(concat(parameters('environment'), variables('project'), 'sa'))]"
        },
        "nicName": {
          "name": "[concat(parameters('environment'), '-', variables('project'), '-Nic')]",
          "networkSecurityGroupName": "default-NSG",
          "addressPrefix": "192.168.0.0/16"
        },
        "subnetName": {
          "name": "[concat(parameters('environment'), '-', variables('project'), '-Subnet')]",
          "subnetPrefix": "192.168.1.0/24"
        },
        "vmName": {
          "name": "[concat(parameters('environment'), '-', variables('project'), '-VM')]"
        },
        "virtualNetworkName":{
          "name": "[concat(parameters('environment'), '-', variables('project'), '-VNet')]"
        }
    },
    "storageAccountConfig": { // Variables for Storage Account Resources
      "sku": "Standard_LRS",
      "kind": "StorageV2",
      "httpsTrafficOnlyEnabled": true,
      "encryptionState": true,
      "accessTier": "Hot"
      },
    "resourceID": {
        "subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('resourceNames').virtualNetworkName.name, variables('resourceNames').subnetName.name)]"
    }
  },
  "resources": [
    { // Create a Storage Account which will be used to configure Boot Diag
      "comments": "[concat('Deploy ', variables('resourceNames').storageAccountName.name, ' Storage Account')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2018-11-01",
      "name": "[variables('resourceNames').storageAccountName.name]",
      "location": "[parameters('location')]",
      "kind": "[variables('storageAccountConfig').kind]",
      "sku": {
        "name": "[variables('storageAccountConfig').sku]"
      },
      "properties": {
        "accessTier": "[variables('storageAccountConfig').accessTier]",
        "supportsHttpsTrafficOnly": "[variables('storageAccountConfig').httpsTrafficOnlyEnabled]",
        "encryption": {
          "keySource": "Microsoft.Storage",
          "services": {
            "blob": {
              "enabled": "[variables('storageAccountConfig').encryptionState]"
            },
            "file": {
              "enabled": "[variables('storageAccountConfig').encryptionState]"
            }
          }
        }
      }
    },
    { // Deploy NSG Rule
      "comments": "[concat('Deploy ', variables('resourceNames').nicName.networkSecurityGroupName, ' Network Security Group')]",
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2019-08-01",
      "name": "[variables('resourceNames').nicName.networkSecurityGroupName]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name":  "default-allow-3389",
            "properties": {
              "priority":  1000,
              "access":  "Allow",
              "direction":  "Inbound",
              "destinationPortRange":  "3389",
              "protocol":  "Tcp",
              "sourcePortRange":  "*",
              "sourceAddressPrefix":  "*",
              "destinationAddressPrefix":  "*"
            }
          }
        ]
      }
    },
    { // Deploy Virtual Network where the VM will be hosted
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2018-11-01",
      "name": "[variables('resourceNames').virtualNetworkName.name]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('resourceNames').nicName.networkSecurityGroupName)]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('resourceNames').nicName.addressPrefix]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('resourceNames').subnetName.name]",
            "properties": {
              "addressPrefix": "[variables('resourceNames').subnetName.subnetPrefix]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('resourceNames').nicName.networkSecurityGroupName)]"
              }
            }
          }
        ]
      }
    },
    { // Deploy Network Interface Card which will be attached to the VM and allocate a Private IP
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2018-11-01",
      "name": "[variables('resourceNames').nicName.name]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', variables('resourceNames').virtualNetworkName.name)]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('resourceID').subnetRef]"
              }
            }
          }
        ]
      }
    },
    { // Deploy a Windows Virtual Machine
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2018-10-01",
      "name": "[variables('resourceNames').vmName.name]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/', variables('resourceNames').storageAccountName.name)]",
        "[resourceId('Microsoft.Network/networkInterfaces/', variables('resourceNames').nicName.name)]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('resourceNames').vmName.name]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "[parameters('windowsOSVersion')]",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "diskSizeGB": 127,
              "lun": 0,
              "createOption": "Empty"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('resourceNames').nicName.name)]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('resourceNames').storageAccountName.name)).primaryEndpoints.blob]"
          }
        }
      }
    }
  ],
  "outputs": {}
}